
#### Created 2015-11-5
#### Purpose: Create New Site Collection on Existing Web Application


# Create Command Line Paramaters/Variables
param (
	[Parameter(Mandatory=$false,HelpMessage="Please Enter the Site Level (Collection or Web)")] 
	[string]$SiteLevel,
	[Parameter(Mandatory=$true,HelpMessage="Please Enter the Site Name")]
	[string]$SiteName,
	[Parameter(Mandatory=$true,HelpMessage="Please Enter the Site URL")] 
	[string]$SiteUrl,
    [Parameter(Mandatory=$true,HelpMessage="Please Enter the Site Description")] 
	[string]$Description,
	[Parameter(Mandatory=$true,HelpMessage="Please Enter the Site Type (BI, Team, INTRANET, eDiscovery, or Survey)")]
	[string]$SiteType,
    [Parameter(Mandatory=$true,HelpMessage="Document Library Name")]
	[string]$DocLibName,
	[Parameter(Mandatory=$false,HelpMessage="Please Specify if Web has Unique Permissions (true or false)")]
	[string]$InheritPermissions,
	[Parameter(Mandatory=$true,HelpMessage="Need a calendar? Y or N")]
	[string]$CalendarCreate,
	[Parameter(Mandatory=$true,HelpMessage="Need a task list? Y or N")]
	[string]$TasksCreate,
	[Parameter(Mandatory=$true,HelpMessage="Need a contact list? Y or N")]
	[string]$ContactsCreate,
	[Parameter(Mandatory=$true,HelpMessage="Contact list is a dept directory? Y or N")]
	[string]$ContactsDir,
	[Parameter(Mandatory=$true,HelpMessage="Need a discussion board? Y or N")]
	[string]$DiscussionCreate,
    [Parameter(Mandatory=$false,HelpMessage="Please Specify the timezone")]
	[int32]$Timezone,
    [Parameter(Mandatory=$false,HelpMessage="What is the site owner email address?")]
	[string]$userEmail
    
	
)

$domain = (Get-ChildItem env:userdomain).value
$admin = $domain.ToString() + '\administrator'
$servername = (Get-ChildItem env:computername).value
$Siteowner = "administrator"
Write-Host "`nBegin Create New Site Script"

# Validate that PowerShell is Running in Administrator Mode
if ( -not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]"Administrator")) {
	Write-Host "`nERROR: This PowerShell Prompt is not running in Administrator mode" -foregroundcolor "red"
	Write-Host "Please restart PowerShell using 'Run As Administrator' option and try again" -foregroundcolor "red"
	Write-Host "`nEnd Create New Site Script`n"
	return
}

# Validate that SharePoint Snap-In is Loaded and if not Load Snap-In
if ((Get-PSSnapin -Name Microsoft.SharePoint.PowerShell -erroraction SilentlyContinue) -eq $null) { Add-PSSnapin Microsoft.SharePoint.PowerShell -erroraction SilentlyContinue } 



# Validate that a validate Site Type was specified and if so set Site Template variables
if ($SiteType.ToUpper() -eq "BI") { $SiteTemplate = Get-SPWebTemplate "BICenterSite#0" }
elseif ($SiteType.ToUpper() -eq "TEAM") { $SiteTemplate = Get-SPWebTemplate "STS#0" }
elseif ($SiteType.ToUpper() -eq "COMMUNITY") { $SiteTemplate = Get-SPWebTemplate "COMMUNITY#0" }
elseif ($SiteType.ToUpper() -eq "EDISCOVERY") { $SiteTemplate = Get-SPWebTemplate "EDISC#0" }
elseif ($SiteType.ToUpper() -eq "INTRANET") { $SiteTemplate = Get-SPWebTemplate "BLANKINTERNET#0" -CompatibilityLevel 15 }
else {
	Write-Host "`nERROR: You have entered an invalid Site Type! `nERROR MSG: Please try again and specify BI, Community, Intranet or Team as the -SiteType value." -Foreground "Red"
	Write-Host "`nEnd Create New Site Script`n"
	return
}
write-host " You requested a ($siteType) Site"

# Validate Inherit Permissions Variable was specified and if no set it to False
if (!$InheritPermissions) { $InheritPermissions = $false }
if ($SiteLevel.ToUpper() -eq "COLLECTION") { $InheritPermissions = $false }

# If no email, set this default user email
if (!$userEmail) { $userEmail = "admin@contoso.com" }
if (!$SiteLevel) { $SiteLevel = "collection" }

# Create Site
if ($SiteLevel.ToUpper() -eq "COLLECTION") {
	# Validate that the Site URL is not already in use
	$Site = Get-SPSite $SiteUrl -ErrorAction SilentlyContinue -ErrorVariable spError
	if ($Site) { 
		Write-Host "`nERROR: The requested Site URL ($SiteUrl) is already in use!`nERROR MSG: Please try again and specify a different Site URL." -Foreground "Red"
		Write-Host "`nEnd Create New Site Script`n"
		return
	}

	# Create New Site Collection
	try {
		Write-Host "`nCreating $SiteName Site"

		$Site = New-SPSite $SiteUrl -Name $SiteName -Description $Description `
		-OwnerAlias $SiteOwner `
		-Template $SiteTemplate `
		-ErrorAction SilentlyContinue `
		-ErrorVariable spError `
		-WarningAction SilentlyContinue `
		-WarningVariable spWarn


		if ($Site -ne $null) { Write-Host "`n$SiteName Site Successfully Created" -Foreground "Green" } 
		elseif ($spError -ne $null) { 
			Write-Host "`nERROR: Failed to Create $SiteName Site!`nERROR MSG: $spError" -Foreground "Red"
			Write-Host "`nEnd Create New Site Script`n"
			return
		}
	} catch {
		Write-Host "`nERROR: Failed to Create $SiteName Top Level Site Collection!`nERROR MSG: $spError" -Foreground "Red"
		Write-Host "`nEnd Create New Site Script`n"
		return
	}
} elseif ($SiteLevel.ToUpper() -eq "WEB") {
	# Validate that the Web URL is not already in use
	$Site = Get-SPWeb $SiteUrl -ErrorAction SilentlyContinue -ErrorVariable spError
	if ($Site) { 
		Write-Host "`nERROR: The requested Site URL ($SiteUrl) is already in use!`nERROR MSG: Please try again and specify a different Site URL." -Foreground "Red"
		Write-Host "`nEnd Create New Site Script`n"
		return
	}

	# Create New Site
	try {
		Write-Host "`nCreating $SiteName Site"

		if ($InheritPermissions -eq $false) {
			$Site = New-SPWeb $SiteUrl -Name $SiteName `
			-Template $SiteTemplate `
			-UniquePermissions `
			-ErrorAction SilentlyContinue `
			-ErrorVariable spError `
			-WarningAction SilentlyContinue `
			-WarningVariable spWarn
		} else { 
			$Site = New-SPWeb $SiteUrl -Name $SiteName `
			-Template $SiteTemplate `
			-ErrorAction SilentlyContinue `
			-ErrorVariable spError `
			-WarningAction SilentlyContinue `
			-WarningVariable spWarn
		}

		if ($Site -ne $null) { Write-Host "`n$SiteName Site Successfully Created" -Foreground "Green" } 
		elseif ($spError -ne $null) { 
			Write-Host "`nERROR: Failed to Create $SiteName Site!`nERROR MSG: $spError" -Foreground "Red"
			Write-Host "`nEnd Create New Site Script`n"
			return
		}
	} catch {
		Write-Host "`nERROR: Failed to Create $SiteName Site!`nERROR MSG: $spError" -Foreground "Red"
		Write-Host "`nEnd Create New Site Script`n"
		return
	}
}


#Site Stuff
write-host "Step 2: Doing things with the site features"

# Loop through and enable Site Collection Features
Function EnableSiteFeature ($Feature) {
	$SPFeature = Get-SPFeature -Site $SiteUrl | Where {$_.DisplayName -eq $Feature}
	if ($SPFeature -eq $null) { 
		Enable-SPFeature -Identity $Feature -Url $SiteUrl -ErrorAction SilentlyContinue -ErrorVariable spError
		if ($spError -ne $null) {
			Write-Host "`nERROR: Unable to Enable Site Collection Feature ($Feature)!`nERROR MSG: $spError" -Foreground "Red"
		} else {
			Write-Host "`nSite Collection Feature ($Feature) Successfully Enabled" -Foreground "Green"
		}
	} else {
		Write-Host "`nSite Collection Feature ($Feature) Already Enabled" -Foreground "Yellow"
	}
}

# Loop through and enable Web Features
Function EnableWebFeature ($Feature) {
	$SPFeature = Get-SPFeature -Web $SiteUrl | Where {$_.DisplayName -eq $Feature}
	if ($SPFeature -eq $null) { 
		Enable-SPFeature -Identity $Feature -Url $SiteUrl -ErrorAction SilentlyContinue -ErrorVariable spError
		if ($spError -ne $null) {
			Write-Host "`nERROR: Unable to Enable Site Feature ($Feature)!`nERROR MSG: $spError" -Foreground "Red"
		} else {
			Write-Host "`nSite Feature ($Feature) Successfully Enabled" -Foreground "Green"
		}
	} else {
		Write-Host "`nSite Feature ($Feature) Already Enabled" -Foreground "Yellow"
	}
}

# loop through and Disable Web Features
Function DisableWebFeature ($Feature) {
	$SPFeature = Get-SPFeature -Web $SiteUrl | Where {$_.DisplayName -eq $Feature}
	if ($SPFeature -eq $null) { 
		Disable-SPFeature -Identity $Feature -Url $SiteUrl -ErrorAction SilentlyContinue -ErrorVariable spError
		if ($spError -ne $null) {
			Write-Host "`nERROR: Unable to Disable Site Feature ($Feature)!`nERROR MSG: $spError" -Foreground "Red"
		} else {
			Write-Host "`nSite Feature ($Feature) Successfully Disabled" -Foreground "Green"
		}
	} else {
		Write-Host "`nSite Feature ($Feature) Already Disabled" -Foreground "Yellow"
	}
}


# Enable Features

	# Enable Site Collection Features
	if ($SiteLevel.ToUpper() -eq "COLLECTION") {
		Write-Host "`nEnabling Site Collection Features"
		EnableSiteFeature -Feature "BaseSite" -Scope "Site"
		EnableSiteFeature -Feature "PublishingSite" -Scope "Site"
		EnableSiteFeature -Feature "PremiumSite" -Scope "Site"
        EnableSiteFeature -Feature "Workflows" -scope "site"
        EnableSiteFeature -Feature "ProjectBasedPolicy" -scope "site"
        EnableSiteFeature -Feature "InPlaceRecords" -scope "site"
		if ($SiteType.ToUpper() -eq "BI") { EnableSiteFeature -Feature "PowerPivotSite" -Scope "Site" }
	}

	# Enable Site Features
	Write-Host "`nEnabling Site Features"
	EnableWebFeature -Feature "BaseWeb" -Scope "Web"
	if ($SiteType.ToUpper() -eq "INTRANET") { EnableWebFeature -Feature "PublishingWeb" -Scope "Web" }
	EnableWebFeature -Feature "PremiumWeb" -Scope "Web"	
    EnableWebFeature -Feature "Metadatanav" -scope "web"
    EnableWebFeature -Feature "TeamCollab" -scope "web"

    # Disable Site Features
	Write-Host "`nDisabling Site Features"
    #DisableWebFeature -Feature "WikiPageHomePage" -Scope "Web"
	

#Permissions Stuff
write-host "Step 1: Doing things with permissions"
# Loop through and Create Default Site Groups
Function CreateDefaultSiteGroups {
	$Web = Get-SPWeb $SiteUrl -ErrorAction SilentlyContinue -ErrorVariable spError
	if ($Web -ne $null) { 
		try { 
			$Web.CreateDefaultAssociatedGroups("SHAREPOINT\system","","") 
			Write-Host "`nDefault Site Groups Successfully Created" -Foreground "Green"
		} catch {
			Write-Host "`nERROR: Failed to create Default Site Groups!`nERROR MSG: $_" -Foreground "Red"
		}
	}
}

# Create Access Request Email
Function AccessEmail {
	$Web.RequestAccessEmail =$userEmail
	$Web.Update()
}


# Create Default Site Groups for sites other than community
if ($InheritPermissions -eq $false) {
	Write-Host "`nCreating Default Site Groups"
	If ($SiteType.ToUpper() -ne "COMMUNITY") { CreateDefaultSiteGroups }
}

# Create permission leven called Site Manager
$web=$site.RootWeb;
$plAdmin=New-Object Microsoft.SharePoint.SPRoleDefinition
$plAdmin.Name="Site Manager"
$plAdmin.Description="In charge of managing the site"
$plAdmin.BasePermissions="EmptyMask,
ViewListItems,
AddListItems,
EditListItems,
DeleteListItems,
ApproveItems,
OpenItems,
ViewVersions,
DeleteVersions,
CancelCheckout,
ManagePersonalViews,
ManageLists,
ViewFormPages,
Open,
ViewPages,
AddAndCustomizePages,
ApplyThemeAndBorder,
ApplyStyleSheets,
ViewUsageData,
ManageWeb,
CreateGroups,
BrowseDirectories,
BrowseUserInfo,
AddDelPrivateWebParts,
UpdatePersonalWebParts,
UseClientIntegration,
UseRemoteAPIs,
ManageAlerts,
CreateAlerts,
EditMyUserInfo,
EnumeratePermissions"
$web.RoleDefinitions.Add($plAdmin);


# Update Site Permissions
if ($InheritPermissions -eq $false -or $SiteLevel.ToUpper() -eq "COLLECTION") {
	Write-Host "`nUpdating Site Permissions"
	# Set Update Variables
	$Web = Get-SPWeb $SiteUrl -ErrorAction SilentlyContinue -ErrorVariable spError
	if ($SiteType.ToUpper() -eq "BI" -or $SiteType.ToUpper() -eq "INTRANET") { $Owner = $Web.EnsureUser($SiteOwner) } 
	else { 
		$Owner = $Web.EnsureUser($SiteOwner)
		$OwnerDirect = $Web.EnsureUser($SiteOwner)
	}

# Remove Site Owner's Direct Site Permissions
	if (($Web -ne $null) -and ($SiteType.ToUpper() -eq "TEAM" -or $SiteType.ToUpper() -eq "PROJECT" -or $SiteType.ToUpper() -eq "COMMUNITY")) { 
		try { 
			$Web.RoleAssignments.Remove($Owner)
			$Web.RoleAssignments.Remove($OwnerDirect)
            $Web.RoleAssignments.Remove($web.groups["Excel Services Viewers"])
            $Web.RoleAssignments.Remove($web.groups["Restricted Readers"])
			Write-Host "`nSite Owner ($SiteOwner) Direct Site Permissions Successfully Removed" -Foreground "Green"
		} catch {
			Write-Host "`nERROR: Failed to remove Site Owner ($SiteOwner) direct Site Permissions!`nERROR MSG: $_" -Foreground "Red"
		}
	}
	
# Loop through and remove Unnecessary Site/Web Groups
Function RemoveSiteGroup ($SiteGroup) {
	try {
		$Web.SiteGroups.Remove("$SiteGroup")
		Write-Host "`nSite Group ($SiteGroup) Successfully Removed" -Foreground "Green"
	} catch {
		Write-Host "`nERROR: Failed to remove Site Group ($SiteGroup)!`nERROR MSG: $_" -Foreground "Red"
	}
}

# Remove Unused Site Groups
	if ($Web -ne $null -and $SiteLevel.ToUpper() -ne "WEB") {
		RemoveSiteGroup -SiteGroup "Approvers"
		RemoveSiteGroup -SiteGroup "Hierarchy Managers"
		RemoveSiteGroup -SiteGroup "Translation Managers"
        RemoveSiteGroup -SiteGroup "Designers"
        RemoveSiteGroup -SiteGroup "Quick Deploy Users"
	}

###### Change owners to have site manager permissions and members to have contribute permissions
    $owners = ($SiteName + ' Owners')
    $OwnerGroup = $web.SiteGroups[$owners]
    $members = ($SiteName + ' Members')
    $membersGroup = $web.SiteGroups[$members]
    $ownerGroupAssignment = new-object Microsoft.SharePoint.SPRoleAssignment($ownerGroup) 
    $membersGroupAssignment = new-object Microsoft.SharePoint.SPRoleAssignment($membersGroup)
    $ownerRoleDefinition = $web.Site.RootWeb.RoleDefinitions["Site Manager"] 
    $membersRoleDefinition = $web.Site.RootWeb.RoleDefinitions["Contribute"]
    $ownerGroupAssignment.RoleDefinitionBindings.Add($ownerRoleDefinition) 
    $membersGroupAssignment.RoleDefinitionBindings.Add($membersRoleDefinition)
    $web.RoleAssignments.Add($ownerGroupAssignment) 
    $web.RoleAssignments.Add($membersGroupAssignment)

 # Make SP admin the owner of the owners group
    $OwnersGroup = $Web.SiteGroups["$SiteName Owners"]
    $user = $web.EnsureUser($siteowner)
	$OwnersGroup.Owner = $user
	$OwnersGroup.Update()

 # allow requests for membership in visitors and members groups
    $MembersGroup = $Web.SiteGroups["$SiteName Members"]
    $Membersgroup.AllowRequestToJoinLeave = $true
    $Membersgroup.RequestToJoinLeaveEmailSetting = $userEmail
    $membersgroupname = $membersGroup.Name
    $membersgroup.Name = $membersgroupname + " (Can Edit)"
	$MembersGroup.Update()

    $VisitorsGroup = $Web.SiteGroups["$SiteName Visitors"]
    $VisitorsGroup.AllowRequestToJoinLeave = $true
    $VisitorsGroup.RequestToJoinLeaveEmailSetting = $userEmail
    $VisitorsGroupname = $VisitorsGroup.Name
    $VisitorsGroup.Name = $VisitorsGroupname + " (Read Only)"
	$VisitorsGroup.Update()
    
 # remove full control from owners, and edit from members

    $group = $web.SiteGroups[$ownerGroup]
    $ra = $group.ParentWeb.RoleAssignments.GetAssignmentByPrincipal($group)
    $rd = $group.ParentWeb.RoleDefinitions["Full Control"]
    $ra.RoleDefinitionBindings.Remove($rd)
    $ra.Update()
    $group.Update()
    $web.Dispose()
    $group = $web.SiteGroups[$membersGroup]
    $ra = $group.ParentWeb.RoleAssignments.GetAssignmentByPrincipal($group)
    $rd = $group.ParentWeb.RoleDefinitions["Edit"]
    $ra.RoleDefinitionBindings.Remove($rd)
    $ra.Update()
    $group.Update()
    $web.Dispose()

	# Create Power Users Site Group and Grant Edit Permissions to Site
	 $GroupOwner = $Web.SiteGroups["$SiteName Owners"]
	 $GroupDesc = "Use this group to grant people advanced edit permissions to the SharePoint site: $SiteName"

	 try {
		 # Create Power Users Site Group
		 $Web.SiteGroups.Add("$SiteName Power Users",$Web.Site.Owner,$Web.Site.Owner,$GroupDesc)
		 $PUGroup = $Web.SiteGroups["$SiteName Power Users"]
		 $PUGroup.AllowMembersEditMembership = $false
		 $PUGroup.Owner = $GroupOwner
         $PUGroup.AllowRequestToJoinLeave = $true
         $PUGroup.OnlyAllowMembersViewMembership = $false
         $PUGroup.RequestToJoinLeaveEmailSetting = $userEmail
		 $PUGroup.Update()

		# Grant Power Users Site Group Edit Role
		 $PUGroupAssignment = New-Object Microsoft.SharePoint.SPRoleAssignment($PUGroup)
		 $PURoleDefinition = $Web.Site.RootWeb.RoleDefinitions["Edit"]
		 $PUGroupAssignment.RoleDefinitionBindings.Add($PURoleDefinition)
		 $Web.RoleAssignments.Add($PUGroupAssignment)
		 $Web.Update()

		# Remove Site Owner from Designers Site Group
		 $Owner = $Web.EnsureUser($SiteOwner)
		 $PUGroup.RemoveUser($Owner)

	 Write-Host "`nPower Users Site Group ($SiteName Power Users) Successfully Created and Granted Edit Permissions" -Foreground "Green"
	 } catch {
	 	Write-Host "`nERROR: Failed to create Power Users Site Group ($SiteName Power Users)!`nERROR MSG: $_" -Foreground "Red"
	 }
}


#List Stuff
write-host "Step 3: Doing things with lists"

# document library settings
$documents = $web.lists["documents"]
$documents.EnableVersioning = $true
$documents.MajorVersionLimit = 20
$documents.EnableFolderCreation = $false
$datefield = $documents.Fields.GetFieldByInternalName("Modified")
$datefield.FriendlyDisplayFormat = "disabled"
$datefield.Update()
$datefield = $documents.Fields.GetFieldByInternalName("Created")
$datefield.FriendlyDisplayFormat = "disabled"
$datefield.Update()
$documents.Title = $DocLibName
#enable enterprise keywords
$keywords = $documents.ParentWeb.AvailableFields["Enterprise Keywords"]
if ($documents.Fields.ContainsField("Enterprise Keywords") -eq $false)
  {
    $documents.Fields.Add($keywords)
    $documents.Update()
    write-host $keywords.Title " added successfully to the list"
  }
  else
  {
    write-host $keywords.Title  " column already exists in the list"
  }


#loop through and create some lists
Function CreateList ($ListName, $ListType, $CustomList) {
	try {
		$Web = Get-SPWeb $SiteUrl
		if ($CustomList -eq $true) { $ListTemplate = $Web.Site.GetCustomListTemplates($Web) | Where {$_.Name -eq "$ListType"} } else { $ListTemplate = $Web.ListTemplates[$ListType] }
		$ListDescription = "This is the " + $ListType + " list for the " + $SiteName + " site."
		$ListStatus = $Web.Lists.Add($ListName,$ListDescription,$ListTemplate)
        $NewList = $Web.lists[$ListName]
		$NewList.EnableAttachments = $False
        $NewList.EnableVersioning = $True
        $NewList.MajorVersionLimit = 20
        $NewList.NavigateForFormsPages = $False
		$datefield = $newlist.Fields.GetFieldByInternalName("Modified")
		$datefield.FriendlyDisplayFormat = "disabled"
		$datefield.Update()
		$datefield = $newlist.Fields.GetFieldByInternalName("Created")
		$datefield.FriendlyDisplayFormat = "disabled"
		$datefield.Update()
		$NewList.Update()
		Write-Host "`nSuccessfully Added List ($ListName) to $SiteName Site!" -Foreground "Green"
	} catch {
		Write-Host "`nERROR: Failed to Add List ($ListName) to $SiteName Site!`nERROR MSG: $_" -Foreground "Red"
	}
}

# Create Default Site Lists
		Write-Host "`nAdding Default Site Lists"
		if ($CalendarCreate -eq "Y"){CreateList -ListName "Calendar" -ListType "Calendar" -CustomList $false}
        CreateList -ListName "Tiles" -ListType "Promoted Links" -CustomList $false
		if ($TasksCreate -eq "Y"){CreateList -ListName "Tasks" -ListType "Tasks" -CustomList $false}
		if ($DiscussionCreate -eq "Y"){CreateList -ListName "Discussions" -ListType "Discussion Board" -CustomList $false}
		if ($ContactsCreate -eq "Y" -and $contactsDir -eq "N"){CreateList -ListName "Contacts" -ListType "Contacts" -CustomList $false}

# Add Promoted links to Tiles list and edit view

$listname = "Tiles"
$list = $web.Lists[$listname]
$newItem = $list.Items.Add()
$newItem["Title"] = "Help"
$newItem["LinkLocation"] = "https://teamstuff.rackspace.com"
$newItem["LaunchBehavior"] = "New Tab"
$newItem.Update()
$allview = $list.views | where {$_.title -eq "all promoted links"}
$viewFields = New-Object System.Collections.Specialized.StringCollection
$viewFields.Add(“Edit")

#define web part settings

# create promoted links web part
$HomePageTiles = New-Object “Microsoft.SharePoint.WebPartPages.xsltListViewWebPart”
$PromotedLinkslist = $web.Lists[“Tiles”]
$HomePageTiles.ListId = $promotedlinkslist.ID
 $HomePageTiles.ViewGuid = $promotedLinkslist.DefaultView.ID.ToString(“B”).ToUpper()
 $HomePageTiles.Title = “Tiles View”
 $homepagetiles.ServerRender = $false
 $homepagetiles.ClientRender = $true
 $homepagetiles.GhostedXslLink = "main.xsl"
 $homepagetiles.ChromeType = [System.Web.UI.WebControls.WebParts.PartChromeType]::None
 
 # Create content editor web part
 if ($SiteType.ToUpper() -eq "Intranet") { $Content = Get-Content .\IntranetSiteWelcomeText.txt }
 elseif ($SiteType.ToUpper() -eq "TEAM") { $Content = Get-Content .\TeamSiteWelcomeText.txt }
 elseif ($SiteType.ToUpper() -eq "BI") { $Content = Get-Content .\BISiteWelcomeText.txt }
 $CEWP = New-Object Microsoft.SharePoint.WebPartPages.ContentEditorWebPart
 $CEWP.ChromeType = [System.Web.UI.WebControls.WebParts.PartChromeType]::None
 $CEWP.IsVisible = $true
 $CEWP.Title = "Header"
 $WebPartContent = $Content -replace "SiteName",$SiteName
 $WebPartXml = New-Object System.Xml.XmlDocument
 $WebPartXmlElement = $WebPartXml.CreateElement("Content")
 $WebPartXmlElement.InnerText = $WebPartContent
 $CEWP.Content = $WebPartXmlElement
 if ($content -ne $null) { Write-Host "`n$SiteType CEWP Successfully Created" -Foreground "Green" } 

 #create calendar web part
 $calendarlist = $web.Lists | where-object {$_.Title -eq "Calendar" }
 if($calendarlist -ne $null) {
 $CalWP = New-Object Microsoft.SharePoint.WebPartPages.ListViewWebPart
 $CalWP.ListName = $CalendarList.ID.ToString("B").ToUpper()
 $CalWP.ChromeType = [System.Web.UI.WebControls.WebParts.PartChromeType]::TitleOnly
 $CalWP.Width = "700px"
 }


# PUBLISHING PAGE STUFF
# Update Site/Web Default Home Page for publishing sites
 Function UpdatePublishingPage ($RenameExisting) {

	if ($RenameExisting -eq $true) {
		$PubWeb = [Microsoft.SharePoint.Publishing.PublishingWeb]::GetPublishingWeb($Web)
		$PubPage = $PubWeb.GetPublishingPages() | Where { $_.Name -eq "default.aspx" }
		$PubPage.ListItem["Name"] = "defaultold.aspx"
		$PubPage.ListItem.SystemUpdate()
	}

	try {	
		$PubWeb = [Microsoft.SharePoint.Publishing.PublishingWeb]::GetPublishingWeb($Web)
		$PageName = "default.aspx"
		$PageTitle = "Home"
		$PageLayout = $PubWeb.GetAvailablePageLayouts() | Where {$_.Name -eq "BlankWebPartPage.aspx"}
		$Page = $PubWeb.AddPublishingPage($PageName,$PageLayout)
		$Page.Update()
		$Page.ListItem["Title"] = $PageTitle
		$Page.ListItem.SystemUpdate()
		$Page.CheckIn("")
		$Page.ListItem.File.Publish("")
		$RootFolder.WelcomePage = "Pages/$PageName"
		$RootFolder.Update()
	
		if ($RenameExisting -eq $true) {
			$PubPage = $PubWeb.GetPublishingPages() | Where { $_.Name -eq "defaultold.aspx" }
			$PubPage.ListItem.Delete()	
		}
		
		Write-Host "`n$SiteName Welcome Page Successfully Updated" -Foreground "Green"
	} catch {
		Write-Host "`nERROR: Failed to update Welcome Page for $SiteName!`nERROR MSG: $_" -Foreground "Red"
	}

    #create admin page
        $PageName = "admin.aspx"
		$PageTitle = "Manage $SiteName"
		$PageLayout = $PubWeb.GetAvailablePageLayouts() | Where {$_.Name -eq "BlankWebPartPage.aspx"}
		$Page = $PubWeb.AddPublishingPage($PageName,$PageLayout)
		$Page.Update()
		$Page.ListItem["Title"] = $PageTitle
		$Page.ListItem.SystemUpdate()
}

# Get Current Welcome Page
    $Web = Get-SPWeb $SiteUrl	
    $RootFolder = $Web.RootFolder
	$WelcomePage = $RootFolder.WelcomePage
    if ($WelcomePage -eq "Pages/default.aspx") { UpdatePublishingPage -RenameExisting $true }
	if ($Web.ServerRelativeUrl -eq "/") { $Page = $Web.Url + "/" + $Web.RootFolder.WelcomePage } else { $Page = $Web.ServerRelativeUrl + "/" + $Web.RootFolder.WelcomePage }
    if($welcomepage -eq "") { $page = "/sites/" + $sitename + "/default.aspx" }
	# Get the Web Part Manager for the Given  Page
	$WebPartManager = $Web.GetLimitedWebPartManager($Page, [System.Web.UI.WebControls.WebParts.PersonalizationScope]::Shared)

if ($WelcomePage -ne $null) { Write-Host "`nWelcome page: $WelcomePage Successfully detected with page $page" -Foreground "Green" } 
		elseif ($spError -ne $null) { 
			Write-Host "`nERROR: Failed to Discover $WelcomePage!`nERROR MSG: $spError" -Foreground "Red"
			Write-Host "`nEnd Create New Site Script`n"
			return
		}


#edit new homepage
if ($WelcomePage -eq "Pages/default.aspx") {

$page = $web.ServerRelativeUrl + "/" + $welcomepage
$web.Dispose()
$PubWeb = [Microsoft.SharePoint.Publishing.PublishingWeb]::GetPublishingWeb($Web)
$PubPage = $Web.GetFile($Page)
$PubPage.CheckOut()
$PubPage.Update()
$WebPartManager = $Web.GetLimitedWebPartManager($PubPage, [System.Web.UI.WebControls.WebParts.PersonalizationScope]::Shared)
$WebPartManager.AddWebPart($CEWP,"Header",0)
$CEWP.Dispose()
$WebPartManager.AddWebPart($HomePageTiles, "Header", 1)
$HomePageTiles.Dispose()
if ($CalendarCreate -eq "Y") {
		$WebPartManager.AddWebPart($CalWP,"Footer",1)
		$WebPartManager.SaveChanges($CalWP)
		$CalWP.Dispose()
	}
#check page in
write-host "Checking page in"
$web.Dispose()
$PubWeb = [Microsoft.SharePoint.Publishing.PublishingWeb]::GetPublishingWeb($Web)
$PubPage = $PubWeb.GetPublishingPages() | Where { $_.Name -eq "default.aspx" }
$PubPage.ListItem.File.CheckIn("automagically checked in by powershell", "Majorcheckin")

}
 
# Add and Remove web parts from wiki page 
Function UpdateWikiPage  {
write-host "Function wpdatewikipage for welcome page $welcomepage"

#get the webpart ID
 $webpart = $WebPartManager.WebParts | Where-Object {$_.Title -eq $DocLibName }
 $removedWPstorageKey = $webpart.ID.ToString()
 $removedWebPartGuid = $webpart.ID.Replace(“g_”, “”)
 $removedWebPartGuid = $removedWebPartGuid.Replace(“_”, “-“)

$Page = $web.GetFile(“SitePages/home.aspx”)

#delete the documents webpart
 $WebPartManager.DeleteWebPart($WebPartManager.WebParts[$removedWPstoragekey])

#generate a new storage key to add the new webpart
 $newGuid = [System.Guid]::NewGuid().ToString()
 $storageKey = “g_” + $newGuid.Replace(“-“,”_”)

#create new instance of site users webpart
 $SiteUserWP = New-Object “Microsoft.SharePoint.WebPartPages.MembersWebPart”
 $SiteUserWP.ID = $storageKey
 $SiteUserWP.Title = “Site Owners”
 $siteuserwp.DisplayType = "GroupMembership"
 $siteuserwp.MembershipGroupId = 12
$WebPartManager.AddWebPart($SiteUserWP,”wpz”,0)

#get a reference to wiki page item
 $item = $Page.Item

#wiki content is stored in the field “Wiki Content”
$wikicontent = $item[“Wiki Content”]

#replace the Guid values in the HTML content with the new guid
 $wikicontent = $wikicontent.Replace($removedWebPartGuid, $newGuid)

#update the wiki content with new guid
 $item[“Wiki Content”] = $wikicontent
 $item.Update()

write-host “web site ” $web.URL ” documents removed and tiles added successfully”

 # remove get started and replace it
 write-host "Remove getting started and documents from wiki page"

#get the webpart ID
 $webpart = $WebPartManager.WebParts | Where-Object {$_.Title -eq "Get Started With Your Site" }
 $removedWPstorageKey = $webpart.ID.ToString()
 $removedWebPartGuid = $webpart.ID.Replace(“g_”, “”)
 $removedWebPartGuid = $removedWebPartGuid.Replace(“_”, “-“)

$Page = $web.GetFile(“SitePages/home.aspx”)

#delete the get started webpart
 $WebPartManager.DeleteWebPart($WebPartManager.WebParts[$removedWPstoragekey])

#generate a new storage key to add the new webpart
 $newGuid = [System.Guid]::NewGuid().ToString()
 $storageKey = “g_” + $newGuid.Replace(“-“,”_”)

#create new instance of tiles webpart
 
 $HomePageTiles.ID = $storageKey
$WebPartManager.AddWebPart($HomePageTiles,”wpz”,0)

#get a reference to wiki page item
 $item = $Page.Item

#wiki content is stored in the field “Wiki Content”
$wikicontent = $item[“Wiki Content”]

#replace the Guid values in the HTML content with the new guid
 $wikicontent = $wikicontent.Replace($removedWebPartGuid, $newGuid)

#update the wiki content with new guid
 $item[“Wiki Content”] = $wikicontent

$item.Update()

write-host “web site ” $web.URL ” getting started removed and site users added successfully”
}


	if ($WelcomePage -eq "SitePages/Home.aspx") { UpdateWikiPage }
	# if ($SiteType.ToUpper() -ne "TEAM") { AddNewWP }


Write-Host "`nUpdating $SiteName Look and Feel"

# Update Site Navigation
Write-Host "`nUpdating Site Navigation Settings"
	try {
		$Web = Get-SPWeb $SiteUrl
		$PubWeb = [Microsoft.SharePoint.Publishing.PublishingWeb]::GetPublishingWeb($Web)
		$PubWeb.Navigation.GlobalIncludePages = $true
		$PubWeb.Navigation.GlobalIncludeSubSites = $true
		$PubWeb.Navigation.CurrentIncludePages = $false
		$PubWeb.Navigation.CurrentIncludeSubSites = $false
		$PubWeb.Update()
		Write-Host "`nSuccessfully Updated $SiteName Site Navigation Settings" -Foreground "Green"
	} catch {
		Write-Host "`nERROR: Failed to Update $SiteName Site Navigation Settings!`nERROR MSG: $_" -Foreground "Red"
	}

#loop through and create some navigation
Function CreateNav ($LinkTitle) {
	Write-Host "`nUpdating Site Left Navigation"
		try {
			$Web = Get-SPWeb $SiteUrl
			$LeftNav = $Web.Navigation.QuickLaunch
			$LinkUrl = $Web.ServerRelativeUrl + "/Lists/" + $LinkTitle + "/"
			$Link = New-Object Microsoft.SharePoint.Navigation.SPNavigationNode($LinkTitle,$LinkUrl,$true)
			$LinkStatus = $LeftNav.AddAsLast($Link)
			$Web.Update()
			Write-Host "`n$LinkTitle Link Successfully Added to Left Navigation" -Foreground "Green"
		} catch { 
			Write-Host "ERROR: Failed to Add Calendar Link to Left Navigation!`nERROR MSG: $_" -Foreground "Red"
		}
}

# Create navigation items based on what lists were selected
		Write-Host "`nAdding Navigation links"
		if ($CalendarCreate -eq "Y"){CreateNav -LinkTitle "Calendar"}
        if ($TasksCreate -eq "Y"){CreateNav -LinkTitle "Tasks"}
		if ($DiscussionCreate -eq "Y"){CreateNav -LinkTitle "Discussions"}
		if ($ContactsCreate -eq "Y" -and $contactsDir -eq "N"){CreateNav -LinkTitle "Contacts"}


# Upload rackspace themes
$SiteTheme = Get-Item .\RackspaceRed.spcolor
$Folder = $Web.GetFolder("Theme Gallery")
$FolderUrl = "_catalogs/theme/15"
$FileStatus = $Folder.Files.Add($FolderUrl + "/" + $SiteTheme.Name,$SiteTheme.OpenRead(),$false)
$SiteTheme = Get-Item .\RackspaceTurq.spcolor
$FileStatus = $Folder.Files.Add($FolderUrl + "/" + $SiteTheme.Name,$SiteTheme.OpenRead(),$false)
$listname = "Composed Looks"
$list = $web.Lists[$listname]
Write-host "List $($list.title) has $($list.items.count) entries"
$items = $list.items
foreach ($item in $items)
{
    Write-host "  Say Goodbye to $($item.id)" -foregroundcolor red
    $list.getitembyid($Item.id).Delete()
}

$newItem = $list.Items.Add()
$newItem["Title"] = "Rackspace Red"
$newItem["Name"] = "Rackspace Red"
$newItem["Master Page URL"] = "/sites/$sitename/_catalogs/masterpage/seattle.master"
$newItem["Theme URL"] = "/sites/$sitename/_catalogs/theme/15/RackspaceRed.spcolor"
$newItem["Display Order"] = 1
$newItem.Update()
$newItem = $list.Items.Add()
$newItem["Title"] = "Rackspace Turquoise"
$newItem["Name"] = "Rackspace Turquoise"
$newItem["Master Page URL"] = "/sites/$sitename/_catalogs/masterpage/seattle.master"
$newItem["Theme URL"] = "/sites/$sitename/_catalogs/theme/15/RackspaceTurq.spcolor"
$newItem["Display Order"] = 2
$newItem.Update()

	# Set Look and Feel Variables
	$CatalogUrl = "/_catalogs"
	$ColorPalette = "/theme/15/RackspaceRed.spcolor"
	$FontScheme = "/theme/15/SharePointPersonality.spfont"
	
	if ($Web.ServerRelativeUrl -eq "/") { $ThemeUrl = $CatalogUrl + $ColorPalette } 
	elseif ($Web.Site.Url -eq $Web.Url) { $ThemeUrl = $Web.ServerRelativeUrl + $CatalogUrl + $ColorPalette }
	elseif ($SiteLevel.ToUpper() -eq "WEB") {
		$ThemeSite = Get-SPSite $Web.Site.Url
		$ThemeUrl = $ThemeSite.ServerRelativeUrl + $CatalogUrl + $ColorPalette
	}
	
	if ($Web.ServerRelativeUrl -eq "/") { $FontSchemeUrl = $CatalogUrl + $FontScheme } 
	elseif ($Web.Site.Url -eq $Web.Url) { $FontSchemeUrl = $Web.ServerRelativeUrl + $CatalogUrl + $FontScheme }
	elseif ($SiteLevel.ToUpper() -eq "WEB") { 
		$ThemeSite = Get-SPSite $Web.Site.Url
		$FontSchemeUrl = $ThemeSite.ServerRelativeUrl + $CatalogUrl + $FontScheme
	}

	# Apply Theme to Site
	if ($Web -ne $null) {
		try {
			$Web.ApplyTheme($ThemeUrl,$FontSchemeUrl,"","")
			Write-Host "`n$SiteName Look and Feel Successfully Updated" -Foreground "Green"
		} catch {
			Write-Host "`nERROR: Failed to update $SiteName Look and Feel!`nERROR MSG: $_" -Foreground "Red"
		}
	}

# Delete old themes
$Libraries = $web.Lists | where {$_.Title -eq "Theme Gallery"}

    foreach ($library in $Libraries) {

        Write-Output "Getting files from $($library.Title)"
        $Files = $library.Items | where {$_.File -Like "Palette0*.spcolor"}
        foreach ($file in $Files) {
            Write-Output "Deleting file $($file.Name)..."
            $file.Delete()

        } # foreach file
        }

# Update Site Logo
Write-Host "`nUpdating Site Logo"

	# Set Site Logo and Folder Variables
	$Web = Get-SPWeb $SiteUrl
	$SiteLogo = Get-Item .\SiteLogo.png
	if ($SiteType.ToUpper() -eq "BI" -or $SiteType.ToUpper() -eq "INTRANET") {
		$Folder = $Web.GetFolder("Images")
		$FolderURL = "PublishingImages"
	} else {
		$Folder = $Web.GetFolder("Site Assets")
		$FolderUrl = "SiteAssets"
	}

	try {
		# Upload Site Logo to Site Assets Folder
		$FileStatus = $Folder.Files.Add($FolderUrl + "/" + $SiteLogo.Name,$SiteLogo.OpenRead(),$false)
		
		# Update Site Logo Settings
		$Web.SiteLogoUrl = $Web.ServerRelativeUrl + "/" + $FolderUrl + "/" + $SiteLogo.Name
		$Web.Update()

		Write-Host "`n$SiteName Site Logo Successfully Updated" -Foreground "Green"
	} catch {
		Write-Host "`nERROR: Failed to update $SiteName Site Logo!`nERROR MSG: $_" -Foreground "Red"
	}

# Set Timezone
$Timezone = 11
$web.RegionalSettings.TimeZone.ID = $Timezone
$web.Update()

$Web.Dispose()

# Create Search subsite
$SearchWeb = New-SPWeb -url $SiteUrl/search -Template "SRCHCEN#0" -Name "Search"
$web.AllProperties.SRCH_ENH_FTR_URL_SITE = $SearchWeb

#upload list templates
#$ListTemplate = Get-Item .\Top_Secret.stp
#$Folder = $Web.GetFolder("List Template Gallery")
#$FolderUrl = "_catalogs/lt"
#$FileStatus = $Folder.Files.Add($FolderUrl + "/" + $ListTemplate.Name,$ListTemplate.OpenRead(),$false)

#pages perms
if ($SiteType.ToUpper() -eq "BI" -or $SiteType.ToUpper() -eq "INTRANET") {
		$PagesLib = $web.Lists["Pages"]
		
	} else {
		$PagesLib = $web.Lists["Site Pages"]
		
	}
$PagesLib.BreakRoleInheritance($true)
$PagesLib.RoleAssignments.Remove($membersGroup)
$membersGroupAssignment = new-object Microsoft.SharePoint.SPRoleAssignment($membersGroup)

$membersgroupassignment.RoleDefinitionBindings.Add(($Web.RoleDefinitions | Where-Object { $_.Type -eq "read" }))
$pageslib.RoleAssignments.Add($membersgroupassignment) 
$pageslib.Update()


# create admin page
    $Web = Get-SPWeb $SiteUrl
    $AdminPage = Get-Item .\admin.aspx
	if ($SiteType.ToUpper() -eq "BI" -or $SiteType.ToUpper() -eq "INTRANET") {
Write-Host "It's an intranet"		
    $PagesFolder = $web.GetFolder("Pages")
    $PagesURL = "pages"
		
	} else {
Write-Host "It's not an intranet"
    $PagesFolder = $web.GetFolder("Site Pages")
    $PagesURL = "SitePages"
	}

	try {
		# Upload admin page to pages library
		$FileStatus = $PagesFolder.Files.Add($PagesUrl + "/" + $AdminPage.Name,$AdminPage.OpenRead(),$false)
		$Web.Update()

		Write-Host "`n$SiteName admin page uploaded" -Foreground "Green"
	} catch {
		Write-Host "`nERROR: Failed to upload $SiteName admin page!`nERROR MSG: $_" -Foreground "Red"
	}

$images = $web.lists["Site Collection Images"]
$images.EnableMinorVersions = $false
$images.MajorVersionLimit = 20
$images.EnableFolderCreation = $false
$images.Update()

Write-Host "`nEnd Create New Site Script`n"
